{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 1.机器学习基本概念与建模流程"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;从导学课程的内容中，我们知道，机器学习（的过程）本质上就是通过数据的不断训练、从而使得模型在其对应评估指标上表现越来越好的这样一个过程，并且我们也知道了，在此过程中至关重要的一点是要能能够给模型提供有效的反馈，同时模型本身也需要根据反馈结果，不断的进行调整。只有该过程能够顺利进行，模型才能得到有效训练，“机器”才能“学习”。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;尽管从通俗的角度理解什么是机器学习并非难事，但要实际构建一个机器学习的模型却绝非易事。这不仅需要我们掌握包括数学原理在内的一定的基础理论，同时也需要我们拥有一定的编程实现能力。不过呢，“合抱之木，生于毫末；九层之台，起于累土”，首先我们先回顾在Lesson 0中介绍的几个机器学习的核心概念，然后我们尝试在Python环境下实现一个简单的模型——线性回归，并在此过程中深入了解机器学习建模的具体流程。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "机器学习模型训练相关核心概念：\n",
    "- 模型评估指标：用于评估模型实际效果的数值型指标，如准确率；\n",
    "- 模型参数：对模型最终输出结果有影响的模型关键指标，如自变量加权求和汇总过程中的权重；\n",
    "- 模型训练：指通过不断的数据输入、模型参数得到有效调整的过程，此处模型参数的有效调整指的是调整之后能够提升模型表现。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "接下来，我们尝试根据机器学习的一般流程，实现一个简单模型——线性回归的建模。在正式进入建模之前，我们首先还需要补充一些机器学习中的基本概念。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 一、机器学习概念补充"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.经典统计分析方法与机器学习"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;线性回归模型是诞生于是统计学领域的一类模型，同时也是整个线性类模型大类的基础模型，是一类非常重要的统计学模型。在经典统计学领域，线性回归模型拥有坚实的数学理论基础作为支撑，曾在很长一段时间内都是数理统计分析建模最通用的模型之一。不过，值得一提的是，使用传统的统计学方法构建线性回归模型其实并不简单，如果要构建一个统计学意义的线性回归模型，则我们至少需要掌握随机变量的基本分布、变量相关性与独立性、方差分析等基本统计学知识，才能够上手构建线性回归模型。而在机器学习领域，由于机器学习的基本建模思路和流程和经典统计分析有很大区别，在构建线性回归模型时流程较为简单，外加线性回归模型本身可解释性较强，因此可以作为入门的第一个算法来学习。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 其实，从发展历程上来看，有关“算法”或者“模型”的概念早已有之，而实际作用和机器学习算法类似的，就是经典统计学领域的统计分析类算法。不过，尽管机器学习算法是统计分析算法目标一致——核心都是围绕某个具体目标、尝试进行有效的预测，但二者的建模流程和基本思路却有着天壤之别。更多关于二者区别的介绍，我们将在后续课程中逐渐展开讨论。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 当然，从学术角度考虑，机器学习是否属于统计学尚存争论。课上不作过多学术讨论，此处所谓机器学习和统计方法之间的区别，特指与经典统计分析方法（尤其是遵循古典假设的统计学模型）之间的区别。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;从机器学习的角度出发，所谓线性回归，指的是自变量（特征）加权求和汇总求得因变量（标签）的过程。例如Lesson 0中$y = w_1x_1+w_2x_2$的计算过程，就是一个简单的线性回归。当然，此处我们还需补充关于机器学习中和数据相关的基本概念。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.数据与数据集相关概念"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 数据与数据集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;所谓数据，特指能够描绘某件事物的属性或者运行状态的数值，并且一个数据集由多条数据构成。例如Lesson 0中鸢尾花数据，就是描述鸢尾花一般属性的数据集。我们可以通过本地读取文件的方式查看该数据集。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 导入相关包\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "     sepal_length  sepal_width  petal_length  petal_width         species\n0             5.1          3.5           1.4          0.2     Iris-setosa\n1             4.9          3.0           1.4          0.2     Iris-setosa\n2             4.7          3.2           1.3          0.2     Iris-setosa\n3             4.6          3.1           1.5          0.2     Iris-setosa\n4             5.0          3.6           1.4          0.2     Iris-setosa\n..            ...          ...           ...          ...             ...\n145           6.7          3.0           5.2          2.3  Iris-virginica\n146           6.3          2.5           5.0          1.9  Iris-virginica\n147           6.5          3.0           5.2          2.0  Iris-virginica\n148           6.2          3.4           5.4          2.3  Iris-virginica\n149           5.9          3.0           5.1          1.8  Iris-virginica\n\n[150 rows x 5 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n      <th>petal_length</th>\n      <th>petal_width</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.1</td>\n      <td>3.5</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.9</td>\n      <td>3.0</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.7</td>\n      <td>3.2</td>\n      <td>1.3</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.6</td>\n      <td>3.1</td>\n      <td>1.5</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>3.6</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>6.7</td>\n      <td>3.0</td>\n      <td>5.2</td>\n      <td>2.3</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>6.3</td>\n      <td>2.5</td>\n      <td>5.0</td>\n      <td>1.9</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>6.5</td>\n      <td>3.0</td>\n      <td>5.2</td>\n      <td>2.0</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>6.2</td>\n      <td>3.4</td>\n      <td>5.4</td>\n      <td>2.3</td>\n      <td>Iris-virginica</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>5.9</td>\n      <td>3.0</td>\n      <td>5.1</td>\n      <td>1.8</td>\n      <td>Iris-virginica</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows × 5 columns</p>\n</div>"
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_df = pd.read_csv(\"iris.csv\")\n",
    "iris_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "数据集描述鸢尾花基本信息如下："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://i.loli.net/2021/04/04/QxYzbVwI9PCMfXe.jpg\" alt=\"74\" style=\"zoom:30%;\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在上述数据集中，每一行代表一朵花的记录结果，而其中每一列代表所有花的一项共同指标。类似这种二维表格数据，有时也被称为面板数据，属于结构化数据的一种。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 特征与标签"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;鸢尾花数据集中的每一列是所有描述对象的一项共同指标，其中，前四列分别描述了鸢尾花的四项生物学性状，而最后一列则描述了每一朵花所属类别。当然，如果上述表格的记录目的是通过记录鸢尾花的四个维度的不同属性的取值最终判别鸢尾花属于哪一类，则该数据集中的前四列也被称为数据集的特征（features），而最后一列被称为数据集的标签（labels）。当然，据此，我们在实际建模过程中，当需要利用模型进行预测时时，也是通过输入模型一些样本的特征（一些鸢尾花的四个特征取值），让模型进行每个样本的标签判别（判别每一朵花应该属于哪一类）。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;不过，值得一提的是，所谓标签和特征，只是依据模型预测目标进行的、围绕数据集不同列进行的划分方式，如果模型的预测目标发生变化，则数据集的特征和标签也会发生变化。例如，如果围绕鸢尾花数据集我们最终是进行每一朵花的花瓣宽（petal width）的预测，则上述数据集中1、2、3、5列就变成了特征，第4列变成了标签。因此，特征和标签本质上都是人工设置的。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;一般来说，标签列需要放在最后一列。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 注意：数据集中的列也被称为字段，鸢尾花数据集中总共有5列，也就总共有5个字段。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 连续变量和离散变量"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;对于鸢尾花数据而言，由于每一条数据都记录了一朵花的四个维度的属性以及花的所属类别，因此，如果从随机变量的角度出发，每一组观测结果我们也能将其视作5个随机变量的一次观测值。例如，我们可以将花萼长（sepal length）看成是一个随机变量，而第一条数据中的5.1cm，则可看成这个随机变量的第一个观测值。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;既然是随机变量，就有离散变量和连续变量之分。所谓连续变量，指的是随机变量能够取得连续数值，例如随机变量表示距离或者长度测算结果时，该变量就是连续性变量。而离散变量则指的是随机变量只允许取得离散的整数，例如随机变量用0/1表示性别。不难发现，鸢尾花数据集中前四个变量都是连续变量，而最后一个变量是离散型变量（或者说可以用离散变量表示）。也就是说鸢尾花数据集的特征都是连续型特征，而标签则是离散型标签。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 需要补充的一点是，在传统统计分析领域，对于离散型变量，还可以进一步细分为名义型变量和顺序性变量。所谓名义变量，指的是随机变量取得不同离散值时，取值大小本身没有数值意义，只有指代意义。例如，用0/1代表男女，则该变量没有1>0的数值意义。但所谓顺序变量，则有大小方面的数值意义，例如使用0/1/2代表高中/本科/研究生学历，则可用2>1>0来表示学习的高低之分。      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.模型类型"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 分类问题与回归问题"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;离散型变量和连续性变量在数理特征上有很大的区别。因此，对于预测类的机器学习建模来说，标签这一预测指标是连续型变量还是离散型变量，会对模型预测过程造成很大影响。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;据此，如果是围绕离散型标签进行建模预测，则称任务为分类预测任务，该模型为解决分类任务的分类（classification）模型，而如果是围绕连续型标签进行建模预测，则称该任务为回归预测任务，该模型为解决回归问题的回归类（regression）模型。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;很明显，如果依据鸢尾花数据集来构建一个预测某一朵花属于哪个类型的任务，属于分类任务，对应的，若需要完成该任务，我们也需要构建对应的分类模型来进行预测。此外，我们再介绍另外一个用于回归类问题建模的数据集，abalone数据集。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "source": [
    "&emsp;&emsp;由于abalone数据集是txt格式数据集，各列是通过空格进行分隔，并且第一行没有列名，因此我们需要使用下述语句进行读取。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "      0      1      2      3       4       5       6       7   8\n0     1  0.455  0.365  0.095  0.5140  0.2245  0.1010  0.1500  15\n1     1  0.350  0.265  0.090  0.2255  0.0995  0.0485  0.0700   7\n2    -1  0.530  0.420  0.135  0.6770  0.2565  0.1415  0.2100   9\n3     1  0.440  0.365  0.125  0.5160  0.2155  0.1140  0.1550  10\n4     0  0.330  0.255  0.080  0.2050  0.0895  0.0395  0.0550   7\n...  ..    ...    ...    ...     ...     ...     ...     ...  ..\n4172 -1  0.565  0.450  0.165  0.8870  0.3700  0.2390  0.2490  11\n4173  1  0.590  0.440  0.135  0.9660  0.4390  0.2145  0.2605  10\n4174  1  0.600  0.475  0.205  1.1760  0.5255  0.2875  0.3080   9\n4175 -1  0.625  0.485  0.150  1.0945  0.5310  0.2610  0.2960  10\n4176  1  0.710  0.555  0.195  1.9485  0.9455  0.3765  0.4950  12\n\n[4177 rows x 9 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.455</td>\n      <td>0.365</td>\n      <td>0.095</td>\n      <td>0.5140</td>\n      <td>0.2245</td>\n      <td>0.1010</td>\n      <td>0.1500</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.350</td>\n      <td>0.265</td>\n      <td>0.090</td>\n      <td>0.2255</td>\n      <td>0.0995</td>\n      <td>0.0485</td>\n      <td>0.0700</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1</td>\n      <td>0.530</td>\n      <td>0.420</td>\n      <td>0.135</td>\n      <td>0.6770</td>\n      <td>0.2565</td>\n      <td>0.1415</td>\n      <td>0.2100</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0.440</td>\n      <td>0.365</td>\n      <td>0.125</td>\n      <td>0.5160</td>\n      <td>0.2155</td>\n      <td>0.1140</td>\n      <td>0.1550</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0.330</td>\n      <td>0.255</td>\n      <td>0.080</td>\n      <td>0.2050</td>\n      <td>0.0895</td>\n      <td>0.0395</td>\n      <td>0.0550</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4172</th>\n      <td>-1</td>\n      <td>0.565</td>\n      <td>0.450</td>\n      <td>0.165</td>\n      <td>0.8870</td>\n      <td>0.3700</td>\n      <td>0.2390</td>\n      <td>0.2490</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4173</th>\n      <td>1</td>\n      <td>0.590</td>\n      <td>0.440</td>\n      <td>0.135</td>\n      <td>0.9660</td>\n      <td>0.4390</td>\n      <td>0.2145</td>\n      <td>0.2605</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4174</th>\n      <td>1</td>\n      <td>0.600</td>\n      <td>0.475</td>\n      <td>0.205</td>\n      <td>1.1760</td>\n      <td>0.5255</td>\n      <td>0.2875</td>\n      <td>0.3080</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4175</th>\n      <td>-1</td>\n      <td>0.625</td>\n      <td>0.485</td>\n      <td>0.150</td>\n      <td>1.0945</td>\n      <td>0.5310</td>\n      <td>0.2610</td>\n      <td>0.2960</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4176</th>\n      <td>1</td>\n      <td>0.710</td>\n      <td>0.555</td>\n      <td>0.195</td>\n      <td>1.9485</td>\n      <td>0.9455</td>\n      <td>0.3765</td>\n      <td>0.4950</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n<p>4177 rows × 9 columns</p>\n</div>"
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ab_df = pd.read_csv(\"abalone.txt\", sep='\\t', header=None)\n",
    "ab_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "同时，该数据各列名称如下："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Name|Description|      \n",
    "|:--:|:--:|      \n",
    "|Gender|性别，1为Male、-1为Femel、0为infant|      \n",
    "|Length|最长外壳尺寸|\t      \n",
    "|Diameter|垂直于长度的直径|\t      \n",
    "|Height|带壳肉的高度|    \n",
    "|Whole weight|整体重量|\n",
    "|Shucked weight|脱壳重量|\n",
    "|Viscera weight|内脏的重量|\n",
    "|Shell weight|壳的重量|\n",
    "|Rings|（年轮）年龄|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "修改数据集列名称"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8], dtype='int64')"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ab_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ab_df.columns = ['Gender', 'Length', \n",
    "                 'Diameter', 'Height', \n",
    "                 'Whole weight', 'Shucked weight', \n",
    "                 'Viscera weight', 'Shell weight',\n",
    "                 'Rings']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "查看修改结果"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Length</th>\n",
       "      <th>Diameter</th>\n",
       "      <th>Height</th>\n",
       "      <th>Whole weight</th>\n",
       "      <th>Shucked weight</th>\n",
       "      <th>Viscera weight</th>\n",
       "      <th>Shell weight</th>\n",
       "      <th>Rings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.455</td>\n",
       "      <td>0.365</td>\n",
       "      <td>0.095</td>\n",
       "      <td>0.5140</td>\n",
       "      <td>0.2245</td>\n",
       "      <td>0.1010</td>\n",
       "      <td>0.1500</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.350</td>\n",
       "      <td>0.265</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.2255</td>\n",
       "      <td>0.0995</td>\n",
       "      <td>0.0485</td>\n",
       "      <td>0.0700</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1</td>\n",
       "      <td>0.530</td>\n",
       "      <td>0.420</td>\n",
       "      <td>0.135</td>\n",
       "      <td>0.6770</td>\n",
       "      <td>0.2565</td>\n",
       "      <td>0.1415</td>\n",
       "      <td>0.2100</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0.440</td>\n",
       "      <td>0.365</td>\n",
       "      <td>0.125</td>\n",
       "      <td>0.5160</td>\n",
       "      <td>0.2155</td>\n",
       "      <td>0.1140</td>\n",
       "      <td>0.1550</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.330</td>\n",
       "      <td>0.255</td>\n",
       "      <td>0.080</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.0895</td>\n",
       "      <td>0.0395</td>\n",
       "      <td>0.0550</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4172</th>\n",
       "      <td>-1</td>\n",
       "      <td>0.565</td>\n",
       "      <td>0.450</td>\n",
       "      <td>0.165</td>\n",
       "      <td>0.8870</td>\n",
       "      <td>0.3700</td>\n",
       "      <td>0.2390</td>\n",
       "      <td>0.2490</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4173</th>\n",
       "      <td>1</td>\n",
       "      <td>0.590</td>\n",
       "      <td>0.440</td>\n",
       "      <td>0.135</td>\n",
       "      <td>0.9660</td>\n",
       "      <td>0.4390</td>\n",
       "      <td>0.2145</td>\n",
       "      <td>0.2605</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4174</th>\n",
       "      <td>1</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.475</td>\n",
       "      <td>0.205</td>\n",
       "      <td>1.1760</td>\n",
       "      <td>0.5255</td>\n",
       "      <td>0.2875</td>\n",
       "      <td>0.3080</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4175</th>\n",
       "      <td>-1</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.485</td>\n",
       "      <td>0.150</td>\n",
       "      <td>1.0945</td>\n",
       "      <td>0.5310</td>\n",
       "      <td>0.2610</td>\n",
       "      <td>0.2960</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4176</th>\n",
       "      <td>1</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.555</td>\n",
       "      <td>0.195</td>\n",
       "      <td>1.9485</td>\n",
       "      <td>0.9455</td>\n",
       "      <td>0.3765</td>\n",
       "      <td>0.4950</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4177 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Gender  Length  Diameter  Height  Whole weight  Shucked weight  \\\n",
       "0          1   0.455     0.365   0.095        0.5140          0.2245   \n",
       "1          1   0.350     0.265   0.090        0.2255          0.0995   \n",
       "2         -1   0.530     0.420   0.135        0.6770          0.2565   \n",
       "3          1   0.440     0.365   0.125        0.5160          0.2155   \n",
       "4          0   0.330     0.255   0.080        0.2050          0.0895   \n",
       "...      ...     ...       ...     ...           ...             ...   \n",
       "4172      -1   0.565     0.450   0.165        0.8870          0.3700   \n",
       "4173       1   0.590     0.440   0.135        0.9660          0.4390   \n",
       "4174       1   0.600     0.475   0.205        1.1760          0.5255   \n",
       "4175      -1   0.625     0.485   0.150        1.0945          0.5310   \n",
       "4176       1   0.710     0.555   0.195        1.9485          0.9455   \n",
       "\n",
       "      Viscera weight  Shell weight  Rings  \n",
       "0             0.1010        0.1500     15  \n",
       "1             0.0485        0.0700      7  \n",
       "2             0.1415        0.2100      9  \n",
       "3             0.1140        0.1550     10  \n",
       "4             0.0395        0.0550      7  \n",
       "...              ...           ...    ...  \n",
       "4172          0.2390        0.2490     11  \n",
       "4173          0.2145        0.2605     10  \n",
       "4174          0.2875        0.3080      9  \n",
       "4175          0.2610        0.2960     10  \n",
       "4176          0.3765        0.4950     12  \n",
       "\n",
       "[4177 rows x 9 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ab_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "为了方便后续直接调用，我们可以将修改后的数据集保存在本地"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ab_df.to_csv('abalone.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 和鸢尾花数据集一样，abalone dataset也是由专业人士精心统计汇总之后得到的数据集。目前来说，此类数据集往往用于机器学习初学者入门时使用。不过值得一提的是，不同的时代数据采集和获取方式有很大区别。在统计学模型大行其道的百年之前，人们获取数据主要都是通过手工测量和记录的方式（当然Abalone数据集没有那么久历史），并且多数情况下是由专业人事进行，因此数据量较小但数据整体质量较高，而经典统计学算法正是在这一背景下、针对这类数据诞生的方法。而伴随着所谓的大数据时代的到来，数据的生产和应用方式都发生了较大的变化，由于数据可以自动采集、传输和存储，因此数据采集的场景变得无处不在、数据量也呈现爆发式增长，同时数据质量也变得层次不齐。此外，在数据应用层面，实际应用的机器学习算法被要求能够即时运算、快速相应，并且对于质量层次不齐的数据要求产出相对稳定的结果，因此相较于经典统计学算法，机器学习算法计算效率更高、对数据质量要求较低，但同时也存在计算精度不高、计算结果不如统计方法稳定等一系列问题。当然这也是机器学习诞生之初饱受诟病的一点。但也正是机器学习不是那么精准但能应用于各个场景的特性，使得其成为“大数据时代”最为普适的算法。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 当然，也正因如此，我们后续也不会大规模使用一些数据质量特别高、建模门槛比较低的数据集。实际上，在后续的课程中，我们将主要是用三类数据集去进行三个层次的教学。其一是手动创建的、具备一定规律和难度可自定义的数据集，用于前期训练，其二则是竞赛数据，用于综合训练，其三则是企业案例数据，结合实际应用情况进行建模。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;对于abalone数据集来说，Rings是标签，围绕Rings的预测任务是连续型变量的预测任务，因此是个回归类问题。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 二、线性回归模型建模准备"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;接下来，我们尝试手动实现线性回归模型。并借此过程探究机器学习建模的基础理论和一般建模流程。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 数据准备"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;当然，线性回归是属于回归类模型，是针对连续型变量进行数值预测的模型，因此我们需要选用abalone数据集进行建模。此处为了更加清晰的展示建模过程的内部计算细节，我们选取数据集中部分数据带入进行建模。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Whole weight|Rings|      \n",
    "|:--:|:--:|   \n",
    "|1|2|      \n",
    "|3|4|\t      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 模型准备"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;不难看出，上述数据集是极端简化后的数据集，只有一个连续型特征和连续型标签，并且只包含两条数据。围绕只包含一个特征的数据所构建的线性回归模型，也被称为简单线性回归。简单线性回归的模型表达式为$$y = wx + b$$其中x表示自变量，即数据集特征，w表示自变量系数，代表每次计算都需要相乘的某个数值，b表示截距项，代表每次计算都需要相加的某个数值，而y表示因变量，即模型输出结果。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 除了简单线性回归外，线性回归主要还包括多元线性回归和多项式回归两类。      \n",
    "其中，`多元线性回归`用于解决包含多个特征的回归类问题，模型基本表达式为：$$y = w_1x_1+w_2x+...+w_nx_n+b$$其中$x_{1...n}$表示n个自变量，对应数据集的n个特征，$w_{1...n}$表示n个自变量的系数，b表示截距。此处“加权求和汇总”的计算过程较为明显，简单线性回归也是多元线性回归的一个特例。      \n",
    "此外，`多项式回归`则是在多元线性回归基础上，允许自变量最高次项超过1次，例如：$$y = w_1x_1^2+w_2x_2+b$$就代表着一个二元二次回归方程。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;准备好了数据和算法之后，接下来就是模型训练过程。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 三、线性回归模型训练"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.模型训练的本质：有方向的参数调整"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 模型训练与模型参数调整"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;那到底什么是模型训练呢？我们曾在Lesson 0中提到，模型训练就是指对模型参数进行有效调整。模型参数是影响模型输出的关键变量，例如本例中的模型包含两个参数，$w_1和b$，当参数取得不同值时，模型将输出完全不同的结果。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|数据特征|参数组|模型输出|数据标签|      \n",
    "|:--:|:--:|:--:|:--:|   \n",
    "|Whole weight(x)|$(w,b)$|$\\hat y$|Rings(y)|    \n",
    "|1|(1, -1)|0|2|\n",
    "|3|(1, -1)|2|4|\n",
    "|1|(1, 0)|1|2|\n",
    "|3|(1, 0)|3|4|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "其中简单线性回归计算过程为$y = wx+b$。需要说明的是，在很多场景下，我们会使用更加简洁的记号用于代表模型训练过程中的各项数值，用$x_i$表示某条数据第$i$个特征的取值，使用$y$作为某条数据的标签取值，使用$\\hat y$表示某条数据带入模型之后模型输出结果。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;从上式不难看出，模型参数取值不同模型输出结果也不同，而不同组的参数取值似乎也有“好坏之分”，当参数组取值为(1,0)时的模型输出结果，要比参数组取值为(1,-1)时输出结果更加贴近真实值。这其实也就说明第二组参数要好于第一组参数。而“机器”在“学习”的过程，或者说模型训练过程，就是需要找到一组最优参数。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 模型评估指标与损失函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;既然有了模型输出结果“好与坏”的判别，根据Lesson 0中的观点，我们需要将这种反馈有效的传递给模型，才能够让模型在训练过程中逐渐朝向好的方向发展。而要在模型训练过程中建立这种有效的反馈，我们就必须先掌握两个基本概念，即模型评估指标与损失函数。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;其中，模型评估指标是评估模型输出结果“好与坏”的标量计算结果，其最终结果一般由模型预测值$\\hat y$和真实值$y$共同计算得出。例如Lesson 0中的准确率就是一个分类模型的评估指标，并且是通过比较模型预测正确的样本数占总样本数的比例最终得出。而对于回归类问题，最重要的模型评估指标就是SSE——残差平方和。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;所谓残差平方和，指的是模型预测值$\\hat y$和真实值$y$之间的差值的平方和，计算结果表示预测值和真实值之间的差距，结果越小表示二者差距越小，模型效果越好。SSE基本计算公式为$$SSE = \\sum_{i=1}^{n}(\\hat y_i-y_i)^2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "其中n为样本数量。对应的，上述两组不同参数取值对应的模型残差平方和计算结果依次为："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$SSE_{(1,-1)} = (0-2)^2+(2-4)^2 = 8$$\n",
    "$$SSE_{(1,0)} = (1-2)^2+(3-4)^2 = 2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "能够看出，第二组参数对应模型效果更好。据此我们就找到了能够量化评估模型效果好坏的指标。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;有了模型评估指标之后，我们还需要将评估结果有效的反馈给模型。这时就需要引入另一个至关重要的概念：损失函数（Loss Function）。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;和模型评估指标是真实值和预测值的计算过程不同，模型的损失函数都是关于模型参数的函数。损失函数本质上一个衡量模型预测结果和真是结果之间的差异的计算过程，例如在SSE中如果带入模型参数，则就能构成一个SSE损失函数，基本计算过程如下："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|数据特征|参数组|模型输出|数据标签|      \n",
    "|:--:|:--:|:--:|:--:|   \n",
    "|Whole weight(x)|$(w,b)$|$\\hat y$|Rings(y)|    \n",
    "|1|(w, b)|w+b|2|\n",
    "|3|(w, b)|3w+b|4|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$SSELoss(w, b) = (y_1 - ŷ_1)^2 + (y_2 - ŷ_2)^2 = (2 - w - b)^2 + (4 - 3w - b)^2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SSELoss的基本计算过程和SSE一致，只不过SSELoss中带入的是模型参数，而SSE带入的是确定参数值之后的计算结果，因此我们也可以认为对于SSELoss和SSE来说，一个是带参数的方程，一个是确定方程参数之后的计算结果。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;既然SSE和SSELoss的计算过程类似，那为何要区别损失函数和模型评估指标呢？主要有以下几点原因：      \n",
    "其一：对于很多模型（尤其是分类模型）来说，模型评估指标和模型损失函数的计算过程并不一致，例如准确率就很难转化为一个以参数为变量的函数表达式；      \n",
    "其二：模型评估指标和损失函数构建的目标不同，模型评估指标的计算目标是给模型性能一个标量计算结果，而损失函数的构建则是为了找到一组最优的参数结果。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 除了SSE以外，常用的回归类问题的评估指标还有MSE（均方误差）和RMSE（均方根误差），其中MSE就是在SSE的基础上除以样本总量：\n",
    "$$MSE = \\frac{1}{n}SSE = \\frac{1}{n}\\sum_{i=1}^{n}(\\hat y_i-y_i)^2$$\n",
    "而RMSE则是在MSE基础之上开平方算得的结果：\n",
    "$$RMSE = \\sqrt{MSE} = \\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}(\\hat y_i-y_i)^2}$$\n",
    "对应的，MSE和RMSE也有相对的损失函数。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 损失函数与参数求解"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;一旦损失函数构建完成，我们就可以围绕损失函数去寻找损失函数的最小值，以及求出损失函数取得最小值时函数自变量（也就是模型参数）的取值，此时参数的取值就是原模型中参数的最优取值结果。这点从SSE和SSELoss彼此类似的计算过程能够很容易看出来，由于我们最终建模目标是希望模型预测结果和真实结果一致，也就是SSE的取值尽可能小，而SSE的值是SSELoss中的两个变量(w,b)取值决定的，因此如果我们能找到一组(w,b)使得SSE的最终计算结果尽可能的小，也就相当于找到了一组模型的最佳参数。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;至此，我们就发现了损失函数的核心作用：搭建参数求解的桥梁，构建一个协助模型求解参数的方程。通过损失函数的构建，我们可以将求解模型最优参数的问题转化为求解损失函数最小值的问题。至此也就完成了此前所说的确定反馈传递反馈的过程。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 值得注意的是，损失函数的计算方程和实际带入进行建模的数据直接相关，上述SSELoss是在带入两条数据的情况下构建的损失函数，而调整输入数据，损失函数实际计算方程也会发生变化。       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 此外，还有一个和损失函数非常类似的概念——目标函数。目标函数概念相对复杂，并且对当前介绍内容并无影响，因此将放在后续进行介绍。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.利用最优化方法求解损失函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 损失函数的求解"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;在构建好损失函数之后，接下来就是如何求解损失函数的最小值（及损失函数取得最小值时w和b的取值）。值得注意的是，此时损失函数是一个关于模型参数的方程，也就是说模型参数此时成了损失函数的自变量。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;而要求解损失函数最小值，就需要记住一些优化理论和优化算法。当然，此处的优化理论和算法都是一些无约束条件下进行函数极值求解的方法。利用优化方法求解损失函数最小值及其取得最小值时损失函数自变量（也就是模型参数）的取值过程，也被简称为损失函数求解。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 图形展示损失函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;为了更好的讨论损失函数（SSELoss）求最小值的过程，对于上述二元损失函数来说，我们可以将其展示在三维空间内：三维空间坐标分别为w、b、SSELoss。此处我们可以使用Python中matplotlib包和Axes3D函数进行三维图像绘制"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$SSELoss(w, b) = (y_1 - ŷ_1)^2 + (y_2 - ŷ_2)^2 = (2 - w - b)^2 + (4 - 3w - b)^2$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "\u001B[1;32m~\\AppData\\Local\\Temp/ipykernel_13788/3713009831.py\u001B[0m in \u001B[0;36m<module>\u001B[1;34m\u001B[0m\n\u001B[1;32m----> 1\u001B[1;33m \u001B[0mx\u001B[0m \u001B[1;33m=\u001B[0m \u001B[0mnp\u001B[0m\u001B[1;33m.\u001B[0m\u001B[0marange\u001B[0m\u001B[1;33m(\u001B[0m\u001B[1;33m-\u001B[0m\u001B[1;36m1\u001B[0m\u001B[1;33m,\u001B[0m\u001B[1;36m3\u001B[0m\u001B[1;33m,\u001B[0m\u001B[1;36m0.05\u001B[0m\u001B[1;33m)\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[0m\u001B[0;32m      2\u001B[0m \u001B[0my\u001B[0m \u001B[1;33m=\u001B[0m \u001B[0mnp\u001B[0m\u001B[1;33m.\u001B[0m\u001B[0marange\u001B[0m\u001B[1;33m(\u001B[0m\u001B[1;33m-\u001B[0m\u001B[1;36m1\u001B[0m\u001B[1;33m,\u001B[0m\u001B[1;36m3\u001B[0m\u001B[1;33m,\u001B[0m\u001B[1;36m0.05\u001B[0m\u001B[1;33m)\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[0;32m      3\u001B[0m \u001B[0mw\u001B[0m\u001B[1;33m,\u001B[0m \u001B[0mb\u001B[0m \u001B[1;33m=\u001B[0m \u001B[0mnp\u001B[0m\u001B[1;33m.\u001B[0m\u001B[0mmeshgrid\u001B[0m\u001B[1;33m(\u001B[0m\u001B[0mx\u001B[0m\u001B[1;33m,\u001B[0m \u001B[0my\u001B[0m\u001B[1;33m)\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n\u001B[0;32m      4\u001B[0m \u001B[0mSSE\u001B[0m \u001B[1;33m=\u001B[0m \u001B[1;33m(\u001B[0m\u001B[1;36m2\u001B[0m \u001B[1;33m-\u001B[0m \u001B[0mw\u001B[0m \u001B[1;33m-\u001B[0m \u001B[0mb\u001B[0m\u001B[1;33m)\u001B[0m \u001B[1;33m**\u001B[0m \u001B[1;36m2\u001B[0m \u001B[1;33m+\u001B[0m \u001B[1;33m(\u001B[0m\u001B[1;36m4\u001B[0m \u001B[1;33m-\u001B[0m \u001B[1;36m3\u001B[0m \u001B[1;33m*\u001B[0m \u001B[0mw\u001B[0m \u001B[1;33m-\u001B[0m \u001B[0mb\u001B[0m\u001B[1;33m)\u001B[0m \u001B[1;33m**\u001B[0m \u001B[1;36m2\u001B[0m\u001B[1;33m\u001B[0m\u001B[1;33m\u001B[0m\u001B[0m\n",
      "\u001B[1;31mNameError\u001B[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "x = np.arange(-1,3,0.05)\n",
    "y = np.arange(-1,3,0.05)\n",
    "w, b = np.meshgrid(x, y)\n",
    "SSE = (2 - w - b) ** 2 + (4 - 3 * w - b) ** 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = plt.axes(projection='3d')\n",
    "\n",
    "ax.plot_surface(w, b, SSE, cmap='rainbow')\n",
    "ax.contour(w, b, SSE, zdir='z', offset=0, cmap=\"rainbow\")  #生成z方向投影，投到x-y平面\n",
    "plt.xlabel('w')\n",
    "plt.ylabel('b')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "根据图像，我们大概能判断损失函数最小值点位置。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 函数的凹凸性"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;初步探索函数图像，不难看出，目标函数是个整体看起来“向下凸”的函数。从理论出发我们知道，函数的凹凸性是函数的重要性质，也是涉及到损失函数求解方法选取的重要性质。这里我们首先给出凸函数的一般定义，对于任意一个函数，如果函数f(x)上存在任意两个点，$x_1, x_2$，且      \n",
    "$$ \\frac{f(x_1) + f(x_2)}{2} >= f(\\frac{x_1 + x_2}{2}) $$    \n",
    "我们就判定，这个函数是凸函数。 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 这里需要注意的是，凸函数的定义存在一定的“不一致”，和之前一样，此处我们不作过多学术讨论，仅以“向下凸”的函数作为凸函数的一般定义。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 此外，除了函数定义法，我们还可以通过凸集/凹集来定义凸函数。同时，很多机器学习模型所构建的损失函数都是凸函数，因此关于凸函数的优化方法（找到最小值的方法）也就成了机器学习建模过程中最常用的优化方法。而凸优化的相关理论，也逐渐成为算法工程师们的必修课。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "典型的凸函数如$y = x^2$，我们可以绘制函数图像如下："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.arange(-10,10,0.1)\n",
    "y = x ** 2\n",
    "plt.plot(x, y, '-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "不难看出，函数上任意两个点的y取值的均值（函数值的均值）都不小于这两个点均值的y的值（均值的函数值）。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://i.loli.net/2021/01/21/AfR1sjbMUVP5c6r.jpg\" alt=\"9\" style=\"zoom:50%;\" />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 函数值的均值\n",
    "# x1 = 1, x2 = 3\n",
    "(1 ** 2 + 3 ** 2)/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 均值的函数值\n",
    "# x1 = 1, x2 = 3\n",
    "((1+3)/2) ** 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "而对于一个凸函数来说，全域最小值明显存在。求解凸函数的最小值有很多种方法，其中最为基础的方法叫做最小二乘法。并且，虽然此处略过了相关证明过程，但对于上述SSELoss，本质上也是一个凸函数。因此我们是可以通过最小二乘法对SSELoss进行求解的。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 最小二乘法理论基础"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;我们先抛开公式、从一个简单的角度理解最小二乘法。      \n",
    "&emsp;&emsp;通过上例，也就是$ y = x^2 $函数中不难看出，函数全域最小值点为$x=0$点，同时该点对应的函数切线与x轴平行，也就是在最小值点，函数的导数为0。其实这并不难理解，在最小值点左边函数逐渐递减、而在最小值点右边函数逐渐递增，最小值点左右两边函数单调性相反。      \n",
    "&emsp;&emsp;而这种性质其实可以拓展为凸函数的一个关于求解最小值的一般性质，即：    \n",
    "（1）对于一元函数，如果存在导数为0的点，则该点就是最小值点；      \n",
    "（2）对于多元函数，如果存在某一点，使得函数的各个自变量的偏导数都为0，则该点就是最小值点。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;据此，我们就找到了最小二乘法求解凸函数最小值的基本出发点：即通过寻找损失函数导函数（或者偏导函数联立的方程组）为0的点，来求解损失函数的最小值。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 关于驻点、临界点、边界点和拐点的概念讨论：      \n",
    "&emsp;&emsp;其实从更严格的意义上来说，凸函数的最小值点其实是根据边界点和驻点（导数为0的点）决定，如果没有边界点且没有驻点，则函数没有最小值（例如y=x），如果存在边界点，但没有驻点，则边界点的一侧就是最小值点，如果存在驻点（且左右两边单调性相反），则驻点就是最小值点，例如，对于$ y = x^2 $而言，$ y^{'} = 2x $，2x = 0时x取值为0，也就是0点就是最小值点。      \n",
    "值得注意的是，驻点也可以说是临界点，但不是拐点，拐点特指左右两边函数凹凸性发生变化的点，切勿和驻点混淆。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 最小二乘法求解SSELoss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;接下来，尝试利用最小二乘法求解SSELoss。根据上述理论，我们使用最小二乘法求解SSELoss，即\n",
    "$$ SSELoss=  (2 - w - b)^2 + (4 - 3w - b)^2 $$，本质上就是在找到能够令损失函数偏导数取值都为零的一组$(w,b)$。SSELoss的两个偏导数计算过程如下："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>$ \\begin{align} \\frac{\\partial{SSELoss}}{\\partial{(w)}}  \n",
    "& = 2(2-w-b)*(-1) + 2(4-3w-b)*(-3)\\\\\n",
    "& = 20w+8b-28 \\\\\n",
    "& = 0  \\end{align} $</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>$ \\begin{align} \\frac{\\partial{SSELoss}}{\\partial{(b)}}  \n",
    "& = 2(2-w-b)*(-1) + 2(4-3w-b)*(-1)\\\\\n",
    "& = 8w+4b-12 \\\\ \n",
    "& = 0 \\end{align} $</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>$ (1)式 - (2)式*2 可得： 4w-4 = 0，w=1$ <\\center>\n",
    "<center>$ 将w=1带入(2)式 可得： 4b-4 = 0，b=1$ <\\center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "最终可得，损失函数最小值点为(1,1)，即当$w=1,b=1$时模型损失函数计算结果最小、模型SSE取值最小、模型效果最好，此时SSE=0，线性回归模型计算结果为：$$ y = x + 1 $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们也可对比此前参数计算结果："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|数据特征|参数组|模型输出|数据标签|      \n",
    "|:--:|:--:|:--:|:--:|   \n",
    "|Whole weight(x)|$(w,b)$|$\\hat y$|Rings(y)|    \n",
    "|1|(1, -1)|0|2|\n",
    "|3|(1, -1)|2|4|\n",
    "|1|(1, 0)|1|2|\n",
    "|3|(1, 0)|3|4|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "至此，我们就完成了一个机器学习建模的完整流程。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 四、机器学习建模一般流程"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;作为本节重点学习对象，此处我们整体梳理下机器学习的一般建模流程："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Step 1：提出基本模型      \n",
    "&emsp;&emsp;如本节中，我们尝试利用简单线性回归去捕捉一个简单数据集中的基本数据规律，这里的$y=wx+b$就是我们所提出的基本模型。当然，在后续的学习过程中，我们还将接触诸多不同种类的机器学习模型，而不同的模型也有对应的适用场景。值得注意的是，在提出模型时，我们往往会预设好一些影响模型结构或者实际判别性能的参数，如简单线性回归中的w和b；"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Step 2：确定损失函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;接下来，围绕建模的目标构建评估指标，并且围绕评估指标设置损失函数。当然，在本例中，模型评估指标和损失函数的建模流程相同。这里尤其需要反复提醒的是，损失函数不是模型，而是模型参数所组成的一个函数。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Step 3：根据损失函数性质，选择优化方法"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;之前提到，损失函数既承载了我们优化的目标（让预测值和真实值尽可能接近），同时也是包含了模型参数的函数，当我们围绕目标函数求解最小值时，也就完成了模型参数的求解。当然，这个过程本质上就是一个数学的最优化过程，求解目标函数最小值本质上也就是一个最优化问题，而要解决这个问题，我们就需要灵活适用一些最优化方法。当然，在具体的最优化方法的选择上，函数本身的性质是重要影响因素，也就是说，不同类型、不同性质的函数会影响优化方法的选择。在简单线性回归中，由于目标函数是凸函数，我们根据凸函数性质，我们选取了最小二乘法作为该损失函数的优化算法。但实际上，简单线性回归的损失函数其实是所有机器学习模型中最简单的一类损失函数，后续我们还将介绍其他模型的更加复杂的损失函数，以及对应的损失函数求解方法。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Step 4.利用优化算法进行损失函数求解"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;在确定优化方法之后，我们就能够借助优化方法对损失函数进行求解，当然在大多数情况下我们都是求解损失函数的最小值。而伴随损失函数最小值点确定，我们也就找到了一组对应的损失函数自变量的取值，而改组自变量的取值也就是模型的最佳参数。在本例中，通过优化方法求解损失函数的过程还是非常简单的，后续我们在进行更加复杂的损失函数、并适用更加复杂的优化算法案进行求解时，我们会发现，损失函数的求解过程才是建模的主体。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&emsp;&emsp;截止目前，我们并未在数学理论和代码上展开讨论，此处我们也是希望能够在数学理论和代码难度不设门槛的情况下，先行介绍关于机器学习基础理论以及机器学习的一般建模流程。在后续的课程中，数学理论和代码难度都将逐渐提升。类似于最小二乘法严谨数学推导、手动实现复杂数据集上的线性回归建模、其他常用优化算法、调动Scikit-Learn完成相关建模工作等，都将在Lesson 2中进行详细讨论。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
